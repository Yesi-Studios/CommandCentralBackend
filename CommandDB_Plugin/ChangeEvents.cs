using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Collections.Concurrent;
using System.Reflection;
using MySql.Data.MySqlClient;
using MySql.Data.Common;
using UnifiedServiceFramework.Framework;
using AtwoodUtils;

namespace CommandDB_Plugin
{
    /// <summary>
    /// Provides methods for interacting with change events including a change event class, the change events cache, and data access methods.
    /// </summary>
    public static class ChangeEvents
    {
        /// <summary>
        /// This local, readonly property is intended to standardize all methods in this class that access the database and allow easy maintenance.
        /// </summary>
        private static readonly string _tableName = "changeevents";

        /// <summary>
        /// The cache of in-memory, thread-safe change events.  Intended to be used by the service during operation.
        /// <para />
        /// The key is the ID of the Change Event
        /// </summary>
        private static ConcurrentDictionary<string, ChangeEvent> _changeEventsCache = new ConcurrentDictionary<string, ChangeEvent>();

        /// <summary>
        /// Gets the current Change Events Cache.
        /// </summary>
        public static ConcurrentDictionary<string, ChangeEvent> ChangeEventsCache
        {
            get
            {
                return _changeEventsCache;
            }
        }

        /// <summary>
        /// Describes the possible Change Event levels
        /// </summary>
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ChangeEventLevels
        {
            High,
            Medium,
            Low,
            DEFAULT
        }

        /// <summary>
        /// Describes a single change event along with its data access methods
        /// </summary>
        public class ChangeEvent
        {

            #region Properties

            /// <summary>
            /// The ID of this change event.
            /// </summary>
            public string ID { get; set; }

            /// <summary>
            /// The level of importance this change has.
            /// </summary>
            public ChangeEventLevels EventLevel { get; set; }

            /// <summary>
            /// The name of this change.
            /// </summary>
            public string Name { get; set; }

            /// <summary>
            /// The fields that, if they are changed during an update, trigger this event.
            /// </summary>
            public List<string> TriggerFields { get; set; }

            /// <summary>
            /// The model that, if it is changed during an update, triggers an event.
            /// </summary>
            public string TriggerModel { get; set; }

            /// <summary>
            /// A list containing those special permissions a user must have in order to receive alerts generated by this change event.
            /// </summary>
            [Newtonsoft.Json.JsonProperty(ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public List<CustomPermissionTypes> RequiredSpecialPermissions { get; set; }

            #endregion

            #region Overrides

            public override bool Equals(object obj)
            {
                if (obj as ChangeEvent == null)
                    return false;

                ChangeEvent other = obj as ChangeEvent;

                if (other.ID == this.ID)
                    return true;

                return false;
            }

            public override int GetHashCode()
            {
                return this.ID.GetHashCode();
            }

            #endregion

            #region Data Access Methods

            /// <summary>
            /// Inserts a new change event into the database and optionally updates the local cache.
            /// </summary>
            /// <param name="updateCache"></param>
            /// <returns></returns>
            public async Task DBInsert(bool updateCache)
            {
                try
                {
                    using (MySqlConnection connection = new MySqlConnection(Properties.ConnectionString))
                    {
                        await connection.OpenAsync();

                        MySqlCommand command = connection.CreateCommand();
                        command.CommandType = CommandType.Text;
                        command.CommandText = string.Format("INSERT INTO `{0}` (`ID`,`EventLevel`,`Name`,`TriggerFields`,`TriggerModel`,`RequiredSpecialPermissions`) VALUES (@ID, @EventLevel, @Name, @TriggerFields, @TriggerModel, @RequiredSpecialPermissions)", _tableName);

                        command.Parameters.AddWithValue("@ID", this.ID);
                        command.Parameters.AddWithValue("@EventLevel", this.EventLevel.Serialize());
                        command.Parameters.AddWithValue("@Name", this.Name);
                        command.Parameters.AddWithValue("@TriggerFields", this.TriggerFields.Serialize());
                        command.Parameters.AddWithValue("@TriggerModel", this.TriggerModel);
                        command.Parameters.AddWithValue("@RequiredSpecialPermissions", this.RequiredSpecialPermissions.Serialize());

                        await command.ExecuteNonQueryAsync();

                        if (updateCache)
                        {
                            _changeEventsCache.AddOrUpdate(this.ID, this, (key, value) =>
                            {
                                throw new Exception("There was an issue adding this change event to the cache");
                            });
                        }
                    }
                }
                catch
                {
                    throw;
                }
            }

            /// <summary>
            /// Updates the current change event instance by resetting all columns to the current instance and uses the ID to index.  The ID itself cannot be updated. Optionally, updates the local cache.
            /// </summary>
            /// <returns></returns>
            public async Task DBUpdate(bool updateCache)
            {
                try
                {
                    using (MySqlConnection connection = new MySqlConnection(Properties.ConnectionString))
                    {
                        await connection.OpenAsync();

                        MySqlCommand command = connection.CreateCommand();
                        command.CommandType = CommandType.Text;
                        command.CommandText = string.Format("UPDATE `{0}` SET `EventLevel` = @EventLevel, `Name` = @Name, `TriggerFields` = @TriggerFields, `TriggerModel` = @TriggerModel, `RequiredSpecialPermissions` = @RequiredSpecialPermissions WHERE `ID` = @ID", _tableName);

                        command.Parameters.AddWithValue("@EventLevel", this.EventLevel.Serialize());
                        command.Parameters.AddWithValue("@Name", this.Name);
                        command.Parameters.AddWithValue("@TriggerFields", this.TriggerFields.Serialize());
                        command.Parameters.AddWithValue("@TriggerModel", this.TriggerModel);
                        command.Parameters.AddWithValue("@RequiredSpecialPermissions", this.RequiredSpecialPermissions.Serialize());
                        command.Parameters.AddWithValue("@ID", this.ID);


                        await command.ExecuteNonQueryAsync();

                        if (updateCache)
                        {
                            if (!_changeEventsCache.ContainsKey(this.ID))
                                throw new Exception("The cache does not have this change event and so wasn't able to update it.");

                            _changeEventsCache[this.ID] = this;
                        }

                    }
                }
                catch
                {
                    throw;
                }
            }

            /// <summary>
            /// Deletes the current change event instance from the database by using the current ID as the primary key.
            /// </summary>
            /// <returns></returns>
            public async Task DBDelete(bool updateCache)
            {
                try
                {
                    using (MySqlConnection connection = new MySqlConnection(Properties.ConnectionString))
                    {
                        await connection.OpenAsync();

                        MySqlCommand command = connection.CreateCommand();
                        command.CommandType = CommandType.Text;
                        command.CommandText = string.Format("DELETE FROM `{0}` WHERE `ID` = @ID", _tableName);

                        command.Parameters.AddWithValue("@ID", this.ID);

                        await command.ExecuteNonQueryAsync();

                        if (updateCache)
                        {
                            ChangeEvent temp;
                            if (!_changeEventsCache.TryRemove(this.ID, out temp))
                                throw new Exception("The cache does not contain this change event and so wasn't able to delete it.");
                        }

                    }
                }
                catch
                {
                    throw;
                }
            }

            /// <summary>
            /// Returns a boolean indicating if the current instance exists in the database.  This is done by searching for the ID.
            /// </summary>
            /// <returns></returns>
            public async Task<bool> DBExists()
            {
                try
                {
                    using (MySqlConnection connection = new MySqlConnection(Settings.ConnectionString))
                    {
                        await connection.OpenAsync();

                        MySqlCommand command = connection.CreateCommand();
                        command.CommandType = CommandType.Text;
                        command.CommandText = string.Format("SELECT CASE WHEN EXISTS(SELECT * FROM `{0}` WHERE `ID` = @ID) THEN 1 ELSE 0 END", _tableName);

                        command.Parameters.AddWithValue("@ID", this.ID);

                        return Convert.ToBoolean(await command.ExecuteScalarAsync());

                    }
                }
                catch
                {
                    throw;
                }
            }

            #endregion

        }

        #region Static Data Access Methods

        public static async Task<List<ChangeEvent>> DBLoadAll(bool updateCache)
        {
            try
            {
                List<ChangeEvent> result = new List<ChangeEvent>();
                using (MySqlConnection connection = new MySqlConnection(Properties.ConnectionString))
                {
                    await connection.OpenAsync();

                    MySqlCommand command = connection.CreateCommand();
                    command.CommandType = CommandType.Text;
                    command.CommandText = string.Format("SELECT * FROM `{0}`", _tableName);

                    using (MySqlDataReader reader = (MySqlDataReader)await command.ExecuteReaderAsync())
                    {
                        if (reader.HasRows)
                        {
                            while (await reader.ReadAsync())
                            {
                                result.Add(new ChangeEvent()
                                {
                                    ID = reader["ID"].ToString(),
                                    EventLevel = (reader["EventLevel"] as string).Deserialize<ChangeEventLevels>(),
                                    Name = reader["Name"].ToString(),
                                    TriggerFields = reader["TriggerFields"].ToString().Deserialize<List<string>>(),
                                    TriggerModel = reader["TriggerModel"].ToString(),
                                    RequiredSpecialPermissions = reader["RequiredSpecialPermissions"].ToString().Deserialize<List<CustomPermissionTypes>>()
                                });
                            }
                        }
                    }
                }

                if (updateCache)
                {
                    _changeEventsCache = new ConcurrentDictionary<string, ChangeEvent>(result.Select(x => new KeyValuePair<string, ChangeEvent>(x.ID, x)));
                }

                return result;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Loads all change events from a given list of change event subscriptions.
        /// </summary>
        /// <param name="changeEventSubscriptions"></param>
        /// <returns></returns>
        public static async Task<List<ChangeEvent>> DBLoadAllByChangeEventSubscriptions(List<ChangeEventSubscriptions.ChangeEventSubscription> changeEventSubscriptions, bool useCache)
        {
            try
            {
                //If we are allowed to use the cache, that makes this a lot easier.
                if (useCache)
                    return _changeEventsCache.Where(x => changeEventSubscriptions.Exists(y => y.ChangeEventID == x.Key)).Select(x => x.Value).ToList();

                List<ChangeEvent> results = new List<ChangeEvent>();

                using (MySqlConnection connection = new MySqlConnection(Properties.ConnectionString))
                {
                    await connection.OpenAsync();

                    foreach (var sub in changeEventSubscriptions)
                    {
                        using (MySqlCommand command = new MySqlCommand("", connection))
                        {
                            command.CommandText = string.Format("SELECT * FROM `{0}` WHERE `ID` = @ID", _tableName);

                            command.Parameters.AddWithValue("@ID", sub.ChangeEventID);

                            using (MySqlDataReader reader = (MySqlDataReader)await command.ExecuteReaderAsync())
                            {
                                if (reader.HasRows)
                                {
                                    await reader.ReadAsync();

                                    results.Add(new ChangeEvent()
                                    {
                                        ID = reader["ID"].ToString(),
                                        EventLevel = (reader["EventLevel"] as string).Deserialize<ChangeEventLevels>(),
                                        Name = reader["Name"].ToString(),
                                        TriggerFields = reader["TriggerFields"].ToString().Deserialize<List<string>>(),
                                        TriggerModel = reader["TriggerModel"].ToString(),
                                        RequiredSpecialPermissions = reader["RequiredSpecialPermissions"].ToString().Deserialize<List<CustomPermissionTypes>>()
                                    });
                                }
                                else
                                {
                                    throw new Exception(string.Format("While loading a change event from a change event subscription, we found no change event for the ID '{0}'!", sub.ChangeEventID));
                                }
                            }
                        }
                    }
                }
                return results;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Releases the Change Event's cache's memory by clearing the cache.
        /// </summary>
        public static void ReleaseCache()
        {
            try
            {
                _changeEventsCache.Clear();
            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region Client Access Methods

        /// <summary>
        /// WARNING!  THIS IS A CLIENT METHOD.  AUTHENTICATION, AUTHORIZATION AND VALIDATION MUST BE HANDLED PRIOR TO DB INTERACTION.
        /// <para />
        /// Loads all change events freshly from the database or from the cache. 
        /// <para />
        /// Options: 
        /// <para />
        /// acceptcachedresults : instructs us to return either the cache, or load newly from the database.  Prefer the cache, for obvious reasons.  If not found, assumed false.
        /// <para />
        /// name : The name of the change event the client wants to load.  If not found or if it is empty, returns all of the change events.  Case sensitive.
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        public static async Task<MessageTokens.MessageToken> LoadChangeEventsAsync(MessageTokens.MessageToken token)
        {
            try
            {
                //Determine if the client is ok with the cached list or if the client wants an updated list.
                if (token.Args.ContainsKey("acceptcachedresults") && Convert.ToBoolean(token.Args["acceptcachedresults"]))
                {
                    token.Result = _changeEventsCache.Values.ToList(); //Convert to list of change events
                }
                else //The client either didn't say or doesn't want cached results.  So let's go get updated results! :(  greedy bastard
                {
                    List<ChangeEvent> result = new List<ChangeEvent>();
                    using (MySqlConnection connection = new MySqlConnection(Properties.ConnectionString))
                    {
                        await connection.OpenAsync();

                        MySqlCommand command = connection.CreateCommand();
                        command.CommandType = CommandType.Text;
                        command.CommandText = string.Format("SELECT * FROM `{0}` ", _tableName);

                        if (token.Args.ContainsKey("name") && !string.IsNullOrEmpty(token.Args["name"].ToString()))
                        {
                            command.CommandText += "WHERE `Name` = @name";

                            command.Parameters.AddWithValue("@Name", token.Args["name"].ToString());
                        }

                        using (MySqlDataReader reader = (MySqlDataReader)await command.ExecuteReaderAsync())
                        {
                            if (reader.HasRows)
                            {
                                while (await reader.ReadAsync())
                                {
                                    result.Add(new ChangeEvent()
                                    {
                                        ID = reader["ID"].ToString(),
                                        EventLevel = (reader["EventLevel"] as string).Deserialize<ChangeEventLevels>(),
                                        Name = reader["Name"].ToString(),
                                        TriggerFields = reader.ToString().Deserialize<List<string>>(),
                                        TriggerModel = reader.ToString(),
                                        RequiredSpecialPermissions = reader.ToString().Deserialize<List<CustomPermissionTypes>>()
                                    });
                                }
                            }
                        }

                        token.Result = result;
                    }
                }

                return token;
            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region Other Methods

        /// <summary>
        /// Raises an event.  Raising this event will result in emails being sent to all users who subscribe to that event and can view the fields in the event.
        /// <para />
        /// An exception will be thrown if the event doesn't exist. 
        /// </summary>
        /// <param name="eventName">The event to raise.  Not case sensitive.</param>
        /// <param name="data">The data, which contains additioanl info abotu the event.</param>
        public static void RaiseChangeEvent(string eventName, object data)
        {
            try
            {
                //TODO do the event shit here.
            }
            catch
            {
                
                throw;
            }
        }

        #endregion



    }
}
