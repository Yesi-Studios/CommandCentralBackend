using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using FluentNHibernate.Mapping;

namespace CommandCentral.Entities
{
    /// <summary>
    /// Describes a single change event
    /// </summary>
    public class ChangeEvent
    {

        #region Properties

        /// <summary>
        /// The ID of this change event.
        /// </summary>
        public string ID { get; set; }

        /// <summary>
        /// The level of importance this change has.
        /// </summary>
        public ReferenceLists.ChangeEventLevel EventLevel { get; set; }

        /// <summary>
        /// The name of this change.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// A brief description of this change event.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// The fields that, if they are changed during an update, trigger this event.
        /// </summary>
        public List<string> TriggerFields { get; set; }

        /// <summary>
        /// The model that, if it is changed during an update, triggers an event.
        /// </summary>
        public string TriggerModel { get; set; }

        /// <summary>
        /// A list containing those special permissions a user must have in order to receive alerts generated by this change event.
        /// </summary>
        public List<Authorization.ReferenceLists.SpecialPermission> RequiredSpecialPermissions { get; set; }

        #endregion

        /// <summary>
        /// Maps a Change event to the database.
        /// </summary>
        public class ChangeEventMapping : ClassMap<ChangeEvent>
        {
            /// <summary>
            /// Maps a change event to the database.
            /// </summary>
            public ChangeEventMapping()
            {
                Table("change_events");

                Id(x => x.ID).GeneratedBy.Guid();

                References(x => x.EventLevel);

                Map(x => x.Name).Not.Nullable().Unique().Length(20);
                Map(x => x.TriggerModel).Not.Nullable().Length(20);
                Map(x => x.Description).Nullable().Length(40);

                HasMany(x => x.TriggerFields)
                    .Table("change_event_trigger_fields")
                    .KeyColumn("ChangeEventID")
                    .Element("TriggerField");

                HasManyToMany(x => x.RequiredSpecialPermissions);

            }
        }

    }
}
