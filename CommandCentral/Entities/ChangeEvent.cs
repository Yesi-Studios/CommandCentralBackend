using System;
using System.Collections.Generic;
using CommandCentral.Entities.ReferenceLists;
using FluentNHibernate.Mapping;

namespace CommandCentral.Entities
{
    /// <summary>
    /// Describes a single change event
    /// </summary>
    public class ChangeEvent
    {

        #region Properties

        /// <summary>
        /// The Id of this change event.
        /// </summary>
        public virtual Guid Id { get; set; }

        /// <summary>
        /// The level of importance this change has.
        /// </summary>
        public virtual ChangeEventLevels EventLevel { get; set; }

        /// <summary>
        /// The name of this change.
        /// </summary>
        public virtual string Name { get; set; }

        /// <summary>
        /// A brief description of this change event.
        /// </summary>
        public virtual string Description { get; set; }

        /// <summary>
        /// The fields that, if they are changed during an update, trigger this event.
        /// </summary>
        public virtual List<string> TriggerFields { get; set; }

        /// <summary>
        /// The model that, if it is changed during an update, triggers an event.
        /// </summary>
        public virtual string TriggerModel { get; set; }

        /// <summary>
        /// A list containing those special permissions a user must have in order to receive alerts generated by this change event.
        /// </summary>
        public virtual List<Authorization.SpecialPermissions> RequiredSpecialPermissions { get; set; }

        #endregion

        /// <summary>
        /// Maps a Change event to the database.
        /// </summary>
        public class ChangeEventMapping : ClassMap<ChangeEvent>
        {
            /// <summary>
            /// Maps a change event to the database.
            /// </summary>
            public ChangeEventMapping()
            {
                Id(x => x.Id).GeneratedBy.Guid();

                Map(x => x.Name).Not.Nullable().Unique().Length(20);
                Map(x => x.TriggerModel).Not.Nullable().Length(20);
                Map(x => x.Description).Nullable().Length(40);
                Map(x => x.EventLevel).Not.Nullable();

                HasMany(x => x.TriggerFields)
                    .KeyColumn("ChangeEventID")
                    .Element("TriggerField");

                HasMany(x => x.RequiredSpecialPermissions)
                    .KeyColumn("ChangeEventId")
                    .Element("SpecialPermission");

            }
        }

    }
}
