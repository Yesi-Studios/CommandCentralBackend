



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace CDBServiceLibrary
{
    public class Global
    {
        protected void Application_BeginRequest(object sender, EventArgs e)
        {
            HttpContext.Current.Response.AddHeader("Access-Control-Allow-Origin", "http://localhost:1113/g/LoadLists");
            //HttpContext.Current.Response.AddHeader("Access-Control-Allow-Origin", "http://147.51.62.19:1113/g/Login");
            if (HttpContext.Current.Request.HttpMethod == "OPTIONS")
            {
                HttpContext.Current.Response.AddHeader("Access-Control-Allow-Methods", "GET, POST");
                HttpContext.Current.Response.AddHeader("Access-Control-Allow-Headers", "Content-Type, Accept");
                HttpContext.Current.Response.AddHeader("Access-Control-Max-Age", "1728000");
                HttpContext.Current.Response.End();
            }
        }
    }
}



        /// <summary>
        /// Helping method intended to load the person table into the persons table and assign new IDs.  This should not be exposed to the client.
        /// </summary>
        /// <returns></returns>
        /*public static string LoadPersonTabletoPersonsTable()
        {
            try
            {

                DataTable table = new DataTable();
                using (MySqlConnection connection = new MySqlConnection(Properties.ConnectionString))
                {
                    connection.Open();

                    MySqlCommand command = connection.CreateCommand();
                    command.CommandType = CommandType.Text;
                    command.CommandText = "SELECT * FROM `person`";

                    using (MySqlDataReader reader = (MySqlDataReader)command.ExecuteReader())
                    {
                        if (reader.HasRows)
                        {
                            table.Load(reader);
                        }
                    }

                    table.AsEnumerable().ToList().ForEach(x =>
                        {
                            Dictionary<string, object> args = new Dictionary<string, object>()
                            {
                                { "FirstName", x["PERS_fname"] },
                                { "LastName", x["PERS_lname"] },
                                { "MiddleName", x["PERS_mi"] },
                                { "SSN", x["PERS_ssn"] },
                                { "DateOfBirth", x["PERS_dob"] },
                                { "Gender", x["PERS_sex"] },
                                { "Remarks", x["PERS_rmks"] },
                                { "Ethnicity", x["PERS_ethnicity"] },
                                { "ReligiousPreference", x["PERS_relpref"] },
                                { "Suffix", x["PERS_suffix"] },
                                { "OldID", x["PERS_id"] }
                            };

                            InsertPerson(args);
                        });
                }

                return "success!";
            }
            catch (Exception e)
            {
                return e.Message;
            }
        }*/

        /*
        /// <summary>
        /// WARNING!  THIS IS A CLIENT METHOD.  AUTHENTICATION, AUTHORIZATION AND VALIDATION MUST BE HANDLED PRIOR TO DB INTERACTION.
        /// <para />
        /// Searches for people in the persons table.  This uses a key/value pair search scheme in which the client declares both the column and value to search for in that column.
        /// <para />
        /// The client may not request to search twice in the same column, if they do, an error is thrown.
        /// <para />
        /// Options: 
        /// <para />
        /// limit : Indicates to the service how many results should be returned.  If limit either isn't a normal or isn't (0, GlobalReturnLimit], the GlobalReturnLimit is assumed.
        /// orderby : Indicates by which field the results should be ordered.  Not case sensitive.  The field must also be included in the client's "returnfields" parameter.
        /// returnfields : The fields to return from the result set.  This should be received as a JSON array of strings.  Fields are not case senstive.  If the current session's user either can't return a field, or a field isn't valid, an error will be thrown.
        /// Every additional parameter that exists as a column name in the persons table is considered to be an option and is validated as such.  
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        public static async Task<MessageTokens.MessageToken> SearchPersonsAsync(MessageTokens.MessageToken token)
        {
            try
            {
                //Is the user allowed to search for persons in the database?
                //Is the user allowed to search for persons in the database?
                if (!Authorization.Permissions.TranslatePermissionGroupIDs(token.Session.PermissionIDs)
                    .Exists(x => x.SpecialPermissions.Contains(Authorization.Permissions.SpecialPermissionTypes.Search_Users) ||
                                 x.SpecialPermissions.Contains(Authorization.Permissions.SpecialPermissionTypes.Developer)))
                    throw new CDBException("You don't have permission to search for users!");

                //Get the limit
                int limit = Utilities.GetLimitFromArgumentsList(token.Args);

                //Get the fields the user can search or request be returned for use in validation
                Authorization.Permissions.PermissionGroup.TablePermission tablePermission = Authorization.Permissions.GetTablePermissionForUser(token, _tableName);

                //Get all search terms
                List<KeyValuePair<string, object>> parameters = token.Args.AsEnumerable().ToList()
                    .Where(x => Validation.SchemaWhiteList.TablesAndColumns[_tableName].Contains(x.Key, StringComparer.CurrentCultureIgnoreCase)).ToList();

                //If there are multiple search columns, throw an error
                if (parameters.ContainsDuplicates())
                    throw new CDBException("Search Persons does not allow for duplicate search columns.  Please use Simple Search Persons for this functionality, or yell at Atwood to update this method.");

                //Ensure that the fields the user wants to search in are searchable for the current session's user.
                parameters.ToList().Select(x => x.Key).ToList().ForEach(x =>
                    {
                        if (!tablePermission.SearchableFields.Contains(x, StringComparer.CurrentCultureIgnoreCase))
                            throw new CDBException(string.Format("You are not authorized to search in the field '{0}'.", x));
                    });

                //Get the fields the user would like to load and validates them
                List<string> returnFields = new List<string>();
                if (!token.Args.ContainsKey("returnfields") || string.IsNullOrEmpty(token.Args["returnfields"].ToString()))
                {
                    //If the client didn't give us any return fields, then load all of them that the client is allowed.
                    returnFields = tablePermission.ReturnableFields;
                }
                else
                {
                    //Deserialize the returnfields parameter from the client and then check that each of these fields exists in the whitelist.
                    returnFields = token.Args["returnfields"].ToString().Deserialize<List<string>>();

                    returnFields.ForEach(x =>
                    {
                        if (!tablePermission.ReturnableFields.Contains(x, StringComparer.CurrentCultureIgnoreCase))
                            throw new CDBException(string.Format("You don't have permission to request that the field '{0}' be returned.", x));
                    });

                }

                //Get orderby and then validate it.  Also, make sure that the orderby field is in the client's requested return fields.  If it's not, we can't very well order by it.
                string orderby = Utilities.GetOrderByFromArgumentsList(token.Args);
                if (orderby != null)
                {
                    orderby = Validation.SchemaWhiteList.TablesAndColumns[_tableName].FirstOrDefault(x => x.SafeEquals(orderby));
                    if (orderby == null)
                        throw new CDBException("The field you indicated you would like to order by is not valid for this table.");
                    if (!returnFields.Contains(orderby, StringComparer.CurrentCultureIgnoreCase))
                        throw new CDBException("In order to order by the field '{0}', you must also ask that it be returned.");
                }
                

                using (MySqlConnection connection = new MySqlConnection(Properties.ConnectionString))
                {
                    await connection.OpenAsync();

                    MySqlCommand command = connection.CreateCommand();
                    command.CommandType = CommandType.Text;

                    //Build the columns portion of the query
                    string columns = "";
                    for (int x = 0; x < returnFields.Count; x++)
                    {
                        columns += string.Format("`{0}`", returnFields[x]);

                        if (x + 1 != returnFields.Count)
                            columns += ", ";
                        else
                            columns += " ";
                    }

                    //Build the WHERE Clause statement
                    string whereClause = "";
                    if (parameters.Count > 0)
                    {
                        whereClause = "WHERE ";

                        for (int x = 0; x < parameters.Count; x++)
                        {
                            string columnName = Validation.SchemaWhiteList.TablesAndColumns[_tableName].First(y => y.SafeEquals(parameters[x].Key));
                            if (string.IsNullOrEmpty(columnName))
                                throw new Exception(string.Format("An issue occursed while converting the search term '{0}' into the corresponding column.", parameters.ElementAt(x).Key));

                            whereClause += string.Format("`{0}` LIKE @{0}", columnName);
                            command.Parameters.AddWithValue(string.Format("@{0}", columnName), string.Format("%{0}%", parameters.ElementAt(x).Value));

                            if (x + 1 != parameters.Count)
                                whereClause += " AND ";
                        }
                    }

                    //Build the order by clause.
                    string orderbyClause = "";
                    if (!string.IsNullOrEmpty(orderby))
                    {
                        orderbyClause = string.Format("order by `{0}` desc", orderby);
                    }

                    command.CommandText = string.Format("SELECT {0} FROM `{1}` {2} {3} limit {4}", columns, _tableName, whereClause, orderbyClause, limit);

                    //Load the results into a datatable.
                    using (MySqlDataReader reader = (MySqlDataReader)await command.ExecuteReaderAsync())
                    {
                        if (reader.HasRows)
                        {
                            token.Result = new DataTable();

                            (token.Result as DataTable).Load(reader);
                        }
                    }
                }
                
                return token;
            }
            catch
            {
                throw;
            }
        }*/